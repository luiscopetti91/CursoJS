function cantidadDeVocales(phrase){
// Cuenta la cantidad de vocales en la frase pasada por parametros utilizando un bucle for
// Tu c칩digo:游녢
let vocales = ['a', 'e', 'i', 'o', 'u'];
let contador = 0;

for (let i = 0; i < phrase.length; i++) {
  if (vocales.includes(phrase[i].toLowerCase())) {
    contador++;
  }
}

return contador;


}


/*En esta funci칩n, se define un array vocales que contiene todas las vocales en min칰sculas. Luego, se inicializa una variable contador para llevar la cuenta de las vocales encontradas.
A continuaci칩n, se utiliza un bucle for para iterar sobre cada car치cter de la frase. Dentro del bucle, se verifica si el car치cter actual est치 incluido en el array vocales. Para ello, se utiliza el m칠todo includes() que verifica si un elemento est치 presente en un array.
Si el car치cter es una vocal, se incrementa el contador contador.
Finalmente, se retorna el valor de contador, que representa la cantidad de vocales encontradas en la frase. */



  
function primerDivisible(numeroInicial, num) {
// Encuentra el primer n칰mero divisible por 'num' a partir de un n칰mero dado utilizando un bucle while
// Tu c칩digo:游녢
let i = numeroInicial;
while (i % num !== 0) {
  i++;
}
return i;


}

/*"hola"))

/*
while (numeroInicial % num !==0) {
  numeroInicial++;

}
return numeroInicial;
}
*/
/*
*/ //Revisar test
/*La funci칩n recibe dos par치metros: numeroInicial, que es el n칰mero a partir del cual se buscar치 el primer n칰mero divisible, y num, que es el n칰mero por el cual se buscar치 la divisibilidad.
Dentro del bucle while, se incrementa el valor de numero en cada iteraci칩n y se verifica si es divisible por num utilizando el operador %. El bucle continuar치 hasta que numero sea divisible por num.
Cuando se encuentra el primer n칰mero divisible, se retorna su valor. */



function encuentraX(x){
//Realiza un algoritmo que recorre numeros del 1 al 100, cuando pase por el numero X pasado por parametros
// retornar "El numero X es: ..."
// Tu C칩digo:游녢
let i = 1;
while (i <= 100) {
  if (i === x) {
    return "El numero X es: " + i;
  }
  i++;
}
return "No se encontro el numero";

}

function sumandoTodo(num){
// Realiza un algoritmo que el cual recorra del 0 al numero pasado por parametros, debes retornar la suma de todo los
// numeros que se recorrio
// Tu c칩digo:游녢

let i = 0;
let suma = 0;
while (i <= num) {
  suma += i;
  i++;
}
return suma;


}


function BinarioADecimal(num) {
// La funcion recibe por parametro, un numero binario pero en tipo de dato String
// debes tomar este numero binario y ayudandote de un bucle pasarlo a binario
// tu c칩digo:游녢
let decimal = 0;
const longitud = num.length;

for (let i = 0; i < longitud; i++) {
  const bit = parseInt(num.charAt(longitud - 1 - i));
  decimal += bit * Math.pow(2, i);
}

return decimal;
}

function Fibonacci(n){
// Realiza una secuencia Fibonacci con el indice pasado por paramentro
// Se puede representar mediante la siguiente f칩rmula: F(n) = F(n-1) + F(n-2)
// Tu c칩digo:游녢


}



function esPrimo(numero) {
//Escribe un programa que verifique si un n칰mero dado es primo o no.
//Un n칰mero primo es aquel que solo es divisible por 1 y por s칤 mismo.
//Si el numero pasado es primo devolve: numero " es primo." , caso contrario: numero " no es primo."
// Tu c칩digo:游녢

}

function invertirCadena(cadena) {
//La funci칩n toma una cadena de texto como par치metro, devuelve la cadena invertida.
//Ejemplo: 'Hola' -> devolver 'aloH'
//Tu codigo:游녢

}
  
module.exports = {
    encuentraX,
    sumandoTodo,
    BinarioADecimal,
    Fibonacci,
    esPrimo,
    invertirCadena,
    cantidadDeVocales,
    primerDivisible
}