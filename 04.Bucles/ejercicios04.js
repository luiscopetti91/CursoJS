function cantidadDeVocales(phrase){
// Cuenta la cantidad de vocales en la frase pasada por parametros utilizando un bucle for
// Tu c칩digo:游녢
let vocales = ['a', 'e', 'i', 'o', 'u'];
let contador = 0;

for (let i = 0; i < phrase.length; i++) {
  if (vocales.includes(phrase[i].toLowerCase())) {
    contador++;
  }
}

return contador;


}


/*En esta funci칩n, se define un array vocales que contiene todas las vocales en min칰sculas. Luego, se inicializa una variable contador para llevar la cuenta de las vocales encontradas.
A continuaci칩n, se utiliza un bucle for para iterar sobre cada car치cter de la frase. Dentro del bucle, se verifica si el car치cter actual est치 incluido en el array vocales. Para ello, se utiliza el m칠todo includes() que verifica si un elemento est치 presente en un array.
Si el car치cter es una vocal, se incrementa el contador contador.
Finalmente, se retorna el valor de contador, que representa la cantidad de vocales encontradas en la frase. */



  
function primerDivisible(numeroInicial, num) {
// Encuentra el primer n칰mero divisible por 'num' a partir de un n칰mero dado utilizando un bucle while
// Tu c칩digo:游녢

let i = numeroInicial;
while (i % num !== 0) {
  i++;
}
return i;


}


/*
while (numeroInicial % num !==0) {
  numeroInicial++;

}
return numeroInicial;
}
*/
/*
*/ //Revisar test
/*La funci칩n recibe dos par치metros: numeroInicial, que es el n칰mero a partir del cual se buscar치 el primer n칰mero divisible, y num, que es el n칰mero por el cual se buscar치 la divisibilidad.
Dentro del bucle while, se incrementa el valor de numero en cada iteraci칩n y se verifica si es divisible por num utilizando el operador %. El bucle continuar치 hasta que numero sea divisible por num.
Cuando se encuentra el primer n칰mero divisible, se retorna su valor. */



function encuentraX(x){
//Realiza un algoritmo que recorre numeros del 1 al 100, cuando pase por el numero X pasado por parametros
// retornar "El numero X es: ..."
// Tu C칩digo:游녢
for (let i = 1; i <= 100; i++) {
  if (i === x) {
    return "El numero X es: " + i;
  }
}
return "No se encontro el numero";


}

/*function encuentraX(x){
let i = 1;
while (i <= 100) {
  if (i === x) {
    return "El numero X es: " + i;
  }
  i++;
}
return "No se encontro el numero";
}
 */
/*
La funci칩n encuentraX busca un n칰mero dado llamado X en un rango del 1 al 100. Si el n칰mero X se encuentra en ese rango, la funci칩n devuelve un mensaje indicando que el n칰mero X ha sido encontrado y su valor. Si el n칰mero X no se encuentra en ese rango, la funci칩n devuelve un mensaje indicando que el n칰mero no ha sido encontrado.
 Explicaci칩n del c칩digo:
 1. La funci칩n encuentraX comienza con una declaraci칩n de variable que inicializa el valor de i a 1.
2. Luego, se utiliza un bucle while para iterar a trav칠s de los n칰meros del 1 al 100.
3. En cada iteraci칩n del bucle, se comprueba si el valor actual de i es igual a X.
4. Si i es igual a X, la funci칩n devuelve un mensaje indicando que el n칰mero X ha sido encontrado y su valor.
5. Si i no es igual a X, se incrementa el valor de i y se contin칰a con la siguiente iteraci칩n del bucle.
6. Si el bucle se completa sin encontrar el n칰mero X, la funci칩n devuelve un mensaje indicando que el n칰mero no ha sido encontrado. */



function sumandoTodo(num){
// Realiza un algoritmo que el cual recorra del 0 al numero pasado por parametros, debes retornar la suma de todo los
// numeros que se recorrio
// Tu c칩digo:游녢

let i = 0;
let suma = 0;
while (i <= num) {
  suma += i;
  i++;
}
return suma;
}
/*
El c칩digo realiza una funci칩n llamada "sumandoTodo" que recibe un n칰mero como par치metro. La funci칩n recorre todos los n칰meros desde 0 hasta el n칰mero pasado como par치metro y devuelve la suma de todos los n칰meros recorridos.
 Explicaci칩n paso a paso del c칩digo:
 1. Se define la funci칩n "sumandoTodo" que recibe un par치metro llamado "num".
2. Se declaran dos variables "i" y "suma" con valor inicial de 0.
3. Se utiliza un bucle "while" que se ejecutar치 mientras "i" sea menor o igual a "num".
4. Dentro del bucle, se suma el valor actual de "i" a la variable "suma".
5. Se incrementa el valor de "i" en 1 en cada iteraci칩n del bucle.
6. Cuando el valor de "i" es mayor que "num", el bucle se detiene.
7. Se devuelve el valor final de la variable "suma". */


function BinarioADecimal(num) {
// La funcion recibe por parametro, un numero binario pero en tipo de dato String
// debes tomar este numero binario y ayudandote de un bucle pasarlo a binario
// tu c칩digo:游녢

let decimal = 0;
const longitud = num.length;

for (let i = 0; i < longitud; i++) {
  const bit = parseInt(num.charAt(longitud - 1 - i));
  decimal += bit * Math.pow(2, i);
}

return decimal;

}

/*La funci칩n BinarioADecimal convierte un n칰mero binario en formato de cadena a decimal y devuelve el resultado.
 Primero, se declara una variable decimal con valor 0 y una constante longitud que almacena la longitud de la cadena num. 
 Luego, se utiliza un bucle for que recorre la cadena num de atr치s hacia adelante. En cada iteraci칩n del bucle, se convierte el car치cter en la posici칩n i en un n칰mero entero utilizando parseInt y se almacena en la variable bit. 
 Despu칠s, se multiplica el bit por 2 elevado a la i-칠sima potencia utilizando Math.pow y se suma al valor de la variable decimal.
 Finalmente, se devuelve el valor de la variable decimal que representa el n칰mero binario convertido a decimal. */


function Fibonacci(n){
// Realiza una secuencia Fibonacci con el indice pasado por paramentro
// Se puede representar mediante la siguiente f칩rmula: F(n) = F(n-1) + F(n-2)
// Tu c칩digo:游녢
let arr = [0, 1];
for (let i = 2; i < n; i++) {
  arr.push(arr[i - 1] + arr[i - 2]);
}
return arr;
}
/*
El c칩digo crea una funci칩n llamada Fibonacci que toma un par치metro n. La funci칩n genera una secuencia de Fibonacci con un 칤ndice igual al valor de n. Luego, la funci칩n devuelve la secuencia generada.
Paso a paso:
- La funci칩n Fibonacci toma un par치metro n que representa el 칤ndice de la secuencia Fibonacci que se desea generar.
- Se declara un arreglo llamado arr con los valores iniciales de 0 y 1, que son los primeros dos n칰meros de la secuencia Fibonacci.
- Se utiliza un bucle for que comienza en el 칤ndice 2 y contin칰a hasta n-1.
- Dentro del bucle, se agrega al arreglo arr el resultado de la suma de los dos valores anteriores en la secuencia Fibonacci (es decir, arr[i-1] + arr[i-2]).
- Finalmente, la funci칩n devuelve el arreglo arr que contiene la secuencia Fibonacci generada. */


function esPrimo(numero) {
//Escribe un programa que verifique si un n칰mero dado es primo o no.
//Un n칰mero primo es aquel que solo es divisible por 1 y por s칤 mismo.
//Si el numero pasado es primo devolve: numero " es primo." , caso contrario: numero " no es primo."
// Tu c칩digo:游녢
if (numero <= 1) {
  return numero + " no es primo.";
}
for (let i = 2; i < numero; i++) {
  if (numero % i === 0) {
    return numero + " no es primo.";
  }
}
return numero + " es primo.";
}
/*
El c칩digo es una funci칩n llamada "esPrimo" que recibe un n칰mero como par치metro y verifica si es primo o no. Si el n칰mero es primo, devuelve el mensaje "numero es primo", de lo contrario devuelve "numero no es primo". 
 Explicaci칩n paso a paso:
 1. La funci칩n "esPrimo" recibe un n칰mero como par치metro.
2. Si el n칰mero es menor o igual a 1, devuelve el mensaje "numero no es primo" ya que los n칰meros menores o iguales a 1 no son considerados primos.
3. Si el n칰mero es mayor que 1, se inicia un bucle "for" que se ejecutar치 desde 2 hasta el n칰mero anterior al n칰mero ingresado.
4. Dentro del bucle, se verifica si el n칰mero ingresado es divisible por el n칰mero actual del bucle (i) utilizando el operador m칩dulo (%). Si es divisible, significa que el n칰mero no es primo y se devuelve el mensaje "numero no es primo".
5. Si el bucle termina sin encontrar ning칰n n칰mero por el cual el n칰mero ingresado sea divisible, significa que el n칰mero es primo y se devuelve el mensaje "numero es primo". */




function invertirCadena(cadena) {
//La funci칩n toma una cadena de texto como par치metro, devuelve la cadena invertida.
//Ejemplo: 'Hola' -> devolver 'aloH'
//Tu codigo:游녢
let cadenaInvertida = "";
  for (let i = cadena.length - 1; i >= 0; i--) {
    cadenaInvertida += cadena[i];
  }
  return cadenaInvertida;
}
/*
En este c칩digo, primero creamos una variable vac칤a llamada "cadenaInvertida". Luego, utilizamos un bucle "for" para recorrer la cadena de texto de atr치s hacia adelante. En cada iteraci칩n del bucle, agregamos el car치cter actual al comienzo de la variable "cadenaInvertida". Al final del bucle, devolvemos la variable "cadenaInvertida" como resultado.  
Por ejemplo, si llamamos a la funci칩n "invertirCadena('Hola')", la funci칩n devolver치 la cadena invertida "aloH" */  



module.exports = {
    encuentraX,
    sumandoTodo,
    BinarioADecimal,
    Fibonacci,
    esPrimo,
    invertirCadena,
    cantidadDeVocales,
    primerDivisible
}